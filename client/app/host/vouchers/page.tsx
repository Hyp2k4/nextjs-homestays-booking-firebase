"use client"

import { useEffect, useState, useMemo } from "react"
import { useAuth } from "@/contexts/auth-context"
import { VoucherService } from "@/lib/voucher-service"
import type { Voucher } from "@/types/voucher"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Copy } from "lucide-react"
import { toast } from "sonner"
import { format } from "date-fns"

export default function HostVouchersPage() {
    const { user } = useAuth()
    const [allVouchers, setAllVouchers] = useState<Voucher[]>([])
    const [loading, setLoading] = useState(true)
    const [searchTerm, setSearchTerm] = useState("")
    const [statusFilter, setStatusFilter] = useState("active") // 'active', 'expired', 'all'

    useEffect(() => {
        const fetchVouchers = async () => {
            if (user?.role === 'host') {
                setLoading(true)
                const data = await VoucherService.getVouchersForHost(user.id)
                setAllVouchers(data)
                setLoading(false)
            }
        }
        fetchVouchers()
    }, [user])

    const filteredVouchers = useMemo(() => {
        return allVouchers
            .filter(voucher => {
                if (statusFilter === 'active') {
                    return new Date(voucher.expiryDate) > new Date() && voucher.isActive;
                }
                if (statusFilter === 'expired') {
                    return new Date(voucher.expiryDate) <= new Date();
                }
                return true; // 'all'
            })
            .filter(voucher =>
                voucher.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
                voucher.description.toLowerCase().includes(searchTerm.toLowerCase())
            )
    }, [allVouchers, searchTerm, statusFilter])

    const handleCopyCode = (code: string) => {
        navigator.clipboard.writeText(code)
        toast.success(`Copied code "${code}" to clipboard!`)
    }

    if (loading) {
        return <div>Loading vouchers...</div>
    }

    return (
        <div className="space-y-8">
            <h1 className="text-3xl font-bold">My Vouchers</h1>
            <Card>
                <CardHeader>
                    <CardTitle>Your Vouchers</CardTitle>
                    <CardDescription>Vouchers generated by admins for your properties. Share these codes with your customers!</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="flex flex-col md:flex-row gap-4 mb-4">
                        <Input
                            placeholder="Search by code or description..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="flex-grow"
                        />
                        <Select value={statusFilter} onValueChange={setStatusFilter}>
                            <SelectTrigger className="w-full md:w-[180px]">
                                <SelectValue placeholder="Filter by status" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="active">Active</SelectItem>
                                <SelectItem value="expired">Expired</SelectItem>
                                <SelectItem value="all">All</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Code</TableHead>
                                <TableHead>Description</TableHead>
                                <TableHead>Discount</TableHead>
                                <TableHead>Expires On</TableHead>
                                <TableHead className="text-right">Action</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {filteredVouchers.length > 0 ? filteredVouchers.map((voucher) => (
                                <TableRow key={voucher.id}>
                                    <TableCell className="font-mono">{voucher.code}</TableCell>
                                    <TableCell>{voucher.description}</TableCell>
                                    <TableCell>
                                        {voucher.discountType === 'percentage'
                                            ? `${voucher.discountValue}%`
                                            : new Intl.NumberFormat('vi-VN').format(voucher.discountValue)}
                                    </TableCell>
                                    <TableCell>{format(new Date(voucher.expiryDate), "dd/MM/yyyy")}</TableCell>
                                    <TableCell className="text-right">
                                        <Button variant="outline" size="sm" onClick={() => handleCopyCode(voucher.code)}>
                                            <Copy className="h-4 w-4 mr-2" />
                                            Copy Code
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            )) : (
                                <TableRow>
                                    <TableCell colSpan={5} className="text-center h-24">
                                        No vouchers match your criteria.
                                    </TableCell>
                                </TableRow>
                            )}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
        </div>
    )
}
